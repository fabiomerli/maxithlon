# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python Maxithlon application

on:
  schedule:
    - cron: "00 8 * * 1,4"
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write
  
jobs:
  build:
    
    # Docker Hub image that `container-job` executes in
    container: python:3.6.9-jessie
    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        volumes:
          - ./redis-volume:/data
        env:
          REDIS_ARGS : "--save 5 1 --appendonly yes"

    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
        pip install redis
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Connect to Redis
        # Runs a script that creates a Redis client, populates
        # the client with data, and retrieves data
      run: python python-client-redis.py
      # Environment variable used by the `client.js` script to create a new Redis client.
      env:
        # The hostname used to communicate with the Redis service container
        REDIS_HOST: redis
        # The default Redis port
        REDIS_PORT: 6379
    - name: Run application 
      run: |
         echo $(ls)
         echo $(ls ./Input)
         if [ ${{ vars.MAN_ID }} ]; then
          python AnalisiManifestazione.py -u ${{ vars.USERNAME }} -p ${{ secrets.PASSWORD }} -id ${{ vars.MAN_ID }}
         else
          python AnalisiManifestazione.py -u ${{ vars.USERNAME }} -p ${{ secrets.PASSWORD }}
         fi
        
    - name: Commit back to GitHub
      run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config --global user.name github-actions
            git config --global user.email 41898282+github-actions[bot]@users.noreply.github.com
            git add .
            git commit -m '[Automated action] Build'
            git push
          else
            echo "no changes";
          fi
          
